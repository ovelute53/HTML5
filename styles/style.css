@import url(./normalize.css);
@import url(./reset.css);

/* 기본 스타일 */
*, *::before, *::after{
  box-sizing: border-box;
  /* content-box: 설정한 width 값 + padding + border + margin */
  /* border-box: 설정한 width 값 속에 margin + border + padding 포함. */
}


/* 링크 스타일 */
a {
  color: inherit;
  /* inherit 부모의 요소를 상속받는다. */
  text-decoration: none;
} 

/* footer는 100%, 나머지 영역은 940px로 적용 */
/* 좌우 여백이 브라우저, 창의 크기마다 유동적이게끔 설정 */


/* 본문 스타일 */
body {
  color: #212121;
  background-color: #ccc;
  /* margin: 0;
     -> 모든 브라우저는 고유의 agent stylesheet가 있다.
     -> agenmt stylesheet의 margin값을 0으로 설정. */
  font-family: "Pretendard Variable", Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto, "Helvetica Neue", "Segoe UI", "Apple SD Gothic Neo", "Noto Sans KR", "Malgun Gothic", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif;
  font-weight: 400;
}

/* layout */
.header, .visual, .main, .slogan, .footer-inner {
  width: 940px;
  margin: 0 auto;
  /* 0 auto = 브라우저의 크기 맞게 왼쪽,오른쪽 여백을 자동으로 변경된다. */
}

/* header */
.header {
  background: #fff;
  padding: 0 30px;
  height: 15vh;
  /* vh= viewpoint의 약어 */
  border-radius: 0 0 15px 15px;
  position: relative;
  /* top: 50px; */
}

/* logo */
.logo { 
  position: absolute;
  top: 45px;
  left: 60px;
}

/* 텍스트 링크 모음 */
.member {
  text-align: right;
  padding: 4px 0;
  /* position 속성을 활용하여 .member 영역을 오른쪽으로 10xp 만큼 이동하기 */
  /* position: relative;
  right: -10px; */
  /* transform 속성을 활용하여 .member 영역을 오른쪽으로 10xp 만큼 이동하기 */
  transform: translateX(10px);
}

.member li {
  display: inline-block;
}

/* 마지막 li 요소에 포함된 a요소를 선택하여 오른쪽 padding 0으로 재정의하는 방법*/
/* .memnber li:last-child a {
  padding-right: 0;
} */

.member a {
  padding: 6px 10px;
  display: inherit;
  text-transform: uppercase;
}

.divider {
  margin-right: 4px;
}

/* visual area */
.visual {
  background: orange;
  height: 10vh;
}

/* main area */
.main {
  background: lightgreen;
  height: 50vh;
  display: flow-root;
  padding: 0 15px;
  /* main area에 height를 지정하지 않았을 때 float 설정을 하게된다면 main area의 height가 줄어든다. */
  /* 
  height가 지정되지 않았을 떄 float의 부모요소에 display: flow-root; 적용시키면 레이아웃이 무너지지 않는다.

  float의 부모요소에 overflow: hidden;을 사용할 경우 자주 쓰지만 올바른 방법은 아니다.
  overflow는 넘치는 영역에 대한 처리를 하는 역할을 한다.
  잠재적 위험도: position property로 좌표값을 사용할 경우 일부가 안보이는 경우가 생긴다.
  */
  
  /* BFC = block formatting context, IFC = inline formatting context */

  /* 부모요소에 float을 적용할 경우는 double float할 때 */
}
/* 
.main::before {
  content: "첫번째 자식요소입니다.";
}
.main::after {
  content: "마지막 자식요소입니다.";

  가상요소를 만들어내는 요소이다.
} 
*/

/* 
첫 번째 그룹 250px, 중간 380px, 마지막 190px 각 여백 30px = 940px
position, float, display(inline-block, flex, grid) 방식으로 영역 설정할 수 있음.
*/
/* .clearfix {
  clear: both;
  clear속성이 동작하는 동안 flow속성의 높이를 읽는다.
  float을 무시할거야!
} */

/* .main::after {
  content: "";
  clear: both;
  display: block;
  
  ::after요소는 inline요소이기 떄문에 block처리한다.
} */
.group {
  margin: 0 15px;
  float: left;
}

.group1 {
  background-color: violet;
  width: 250px;
}
.group2 {
  background-color: salmon;
  width: 380px;
}
.group3 {
  background-color: gold;
  width: 190px;
}

/* slogan area */
.slogan {
  background: skyblue;
  height: 10vh;
  clear: both;
}

/* footer area */
.footer {
  background: gray;
}
.footer-inner {
  background: silver;
  height: 15vh;
}
